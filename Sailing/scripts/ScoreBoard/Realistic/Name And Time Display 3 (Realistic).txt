//Name & Time Display (#num) Script
//By Brian Young/Daijo Zenovka
//this script is located in the root prim of name and time display 2(realistic)

//This script receives linked messages from Name & Time Display original script, which contains information about data to display. This script is in a separate linked set because with too many links, the returns for text rendering will diminish.

integer DISPLAY_STRING      = 204000; 
integer DISPLAY_EXTENDED    = 204001; 
integer REMAP_INDICES       = 204002; 
integer RESET_INDICES       = 204003; 
integer SET_FADE_OPTIONS    = 204004; 
integer SET_FONT_TEXTURE    = 204005; 
integer SET_LINE_COLOR      = 204006; 
integer SET_COLOR           = 204007; 
integer RESCAN_LINKSET      = 204008;


integer Sailing_Scoreboard_Realistic = -307; 
integer Sailing_Scoreboard_Wacky = -308; 

string Delimiter = "%$%^";
string Delimiter2 = "@T!ME";

string Set_Segs = "Set_Segs";
string Clear_Segs = "Clear_Segs";

integer MaxNumDisplay = 10;
integer MaxColumns = 2;


ClearDisplay()
{
    integer i;
            for (i = 0; i< MaxNumDisplay*MaxColumns; i++)
            {

                llMessageLinked(LINK_THIS,DISPLAY_STRING,"",(string)(i)); 
            }
}
default
{
    state_entry()
    {
        llListen(0,"",NULL_KEY,"");
        

        llListen(Sailing_Scoreboard_Realistic,"",NULL_KEY,"");
        
        ClearDisplay();
        


    }
    listen(integer channel,string name, key id, string message)
    {
        list temp = llParseString2List(message, [Delimiter], []);
        list temp2;
        if (llList2String(temp,0) == Set_Segs)
        {
            ClearDisplay();
            integer CurPos = 0;
            integer i = 1;// these are the slots in temp that contain individual data
            integer j;
            integer k = 0;//runs through all the board slots
            
            CurPos = 0;
            for (i = 1; i< llGetListLength(temp); i++)
            {
                temp2 = llParseString2List( llList2String(temp, i) , [Delimiter2], []);
                CurPos = 0;
                for (j = 0; j< MaxColumns *MaxNumDisplay; j+=MaxNumDisplay)
                {
                    //llList2String(temp2, CurPos)
                    llMessageLinked(LINK_THIS,DISPLAY_STRING,(string)llList2Integer(temp2, CurPos),(string)(j + k));
                    CurPos++;
                }
                k++;
            }
                    
                
        } 
        else if (llList2String(temp,0) == Clear_Segs)
        {
            ClearDisplay();
        }

        
        
    }
  
}
 
  