//Clef Script //By Brian Young/Daijo Zenovka//Goes in horn molecule of Sax//These scripts control particle emission of musical notes from the saxophone bell. If in wacky mode, it emits the musical note particles.// Mask Flags - set to TRUE to enableinteger glow = TRUE;            // Make the particles glowinteger bounce = FALSE;          // Make particles bounce on Z plane of objectinteger interpColor = TRUE;     // Go from start to end colorinteger interpSize = TRUE;      // Go from start to end sizeinteger wind = FALSE;           // Particles effected by windinteger followSource = TRUE;    // Particles follow the sourceinteger followVel = TRUE;       // Particles turn to velocity direction// Choose a pattern from the following:// PSYS_SRC_PATTERN_EXPLODE// PSYS_SRC_PATTERN_DROP// PSYS_SRC_PATTERN_ANGLE_CONE_EMPTY// PSYS_SRC_PATTERN_ANGLE_CONE// PSYS_SRC_PATTERN_ANGLEinteger pattern =  PSYS_SRC_PATTERN_ANGLE_CONE;// Select a target for particles to go towards// "" for no target, "owner" will follow object owner //    and "self" will target this object//    or put the key of an object for particles to go tokey target = "";// Script variablesinteger pre = 2;          //Adjust the precision of the generated list.integer flags;list sys;integer type;vector tempVector;rotation tempRot;string tempString;integer i;integer Wacky_Channel = -309;string Enable_Wacky = "Enable_Wacky";string Delimiter = "%$%^";integer IsWacky = FALSE;string float2String(float in){    return llGetSubString((string)in,0,pre - 7);}updateParticles(integer SetWacky){        if (!SetWacky)    {                llParticleSystem([]);                  llSetLinkPrimitiveParams(LINK_THIS, [25, ALL_SIDES, 0]);        }    else    {        llSetAlpha(0,ALL_SIDES);         llParticleSystem([]);            llSetLinkPrimitiveParams(LINK_THIS, [25, ALL_SIDES, 0.5]);                                  // MASK FLAGS: set  to "TRUE" to enable  integer glow = TRUE;                                // Makes the particles glow        integer bounce = FALSE;                             // Make particles bounce on Z plane of objects        integer interpColor = TRUE;                         // Color - from start value to end value        integer interpSize = TRUE;                          // Size - from start value to end value        integer wind = FALSE;                               // Particles effected by wind        integer followSource = FALSE;                       // Particles follow the source        integer followVel = TRUE;                           // Particles turn to velocity direction                                                                    // Choose a pattern from the following:                                                        // PSYS_SRC_PATTERN_EXPLODE                                                        //PSYS_SRC_PATTERN_DROP                                                        // PSYS_SRC_PATTERN_ANGLE_CONE_EMPTY                                                        // PSYS_SRC_PATTERN_ANGLE_CONE                                                        // PSYS_SRC_PATTERN_ANGLE        integer pattern = PSYS_SRC_PATTERN_ANGLE;                                                            // Select a target for particles to go towards                                                        // "" for no target, "owner" will follow object owner                                                        //    and "self" will target this object                                                        //    or put the key of an object for particles to go to        key target;                    // Particle paramaters                                        float age = 3;                                  // Life of each particle        float maxSpeed = 0.8;                          // Max speed each particle is spit out at        float minSpeed = 0.0;                           // Min speed each particle is spit out at        string texture = "clef";                     // Texture used for particles, default used if blank        float startAlpha = 1;                         // Start alpha (transparency) value        float endAlpha = 0;                           // End alpha (transparency) value        vector startColor = <1,1,1>;                // Start color of particles <R,G,B>        vector endColor = <1,1,1>;                      // End color of particles <R,G,B> (if interpColor == TRUE)        vector startSize = <.25,.25,.25>;               // Start size of particles        vector endSize = <3,3,3>;                       // End size of particles (if interpSize == TRUE)        vector push = <1.5,0,2.8>;                        // Force pushed on particles            // System paramaters                                        float rate = 2;                               // How fast (rate) to emit particles        float radius =0;                             // Radius to emit particles for BURST pattern        integer count = 1;                             // How many particles to emit per BURST        float outerAngle = 0.4;                         // Outer angle for all ANGLE patterns        float innerAngle = 0;                        // Inner angle for all ANGLE patterns        vector omega = <PI,PI,PI>;                         // Rotation of ANGLE patterns around the source        float life = 0;                                 // Life in seconds for the system to make particles            // Script variables                                        integer flags;                  flags = 0;        if (target == "owner") target = llGetOwner();        if (target == "self") target = llGetKey();        if (glow) flags = flags | PSYS_PART_EMISSIVE_MASK;        if (bounce) flags = flags | PSYS_PART_BOUNCE_MASK;        if (interpColor) flags = flags | PSYS_PART_INTERP_COLOR_MASK;        if (interpSize) flags = flags | PSYS_PART_INTERP_SCALE_MASK;        if (wind) flags = flags | PSYS_PART_WIND_MASK;        if (followSource) flags = flags | PSYS_PART_FOLLOW_SRC_MASK;        if (followVel) flags = flags | PSYS_PART_FOLLOW_VELOCITY_MASK;        if (target != "") flags = flags | PSYS_PART_TARGET_POS_MASK;            llParticleSystem([  PSYS_PART_MAX_AGE,age,                            PSYS_PART_FLAGS,flags,                            PSYS_PART_START_COLOR, startColor,                            PSYS_PART_END_COLOR, endColor,                            PSYS_PART_START_SCALE,startSize,                            PSYS_PART_END_SCALE,endSize,                            PSYS_SRC_PATTERN, pattern,                            PSYS_SRC_BURST_RATE,rate,                            PSYS_SRC_ACCEL, push,                            PSYS_SRC_BURST_PART_COUNT,count,                            PSYS_SRC_BURST_RADIUS,radius,                            PSYS_SRC_BURST_SPEED_MIN,minSpeed,                            PSYS_SRC_BURST_SPEED_MAX,maxSpeed,                            PSYS_SRC_TARGET_KEY,target,                            PSYS_SRC_INNERANGLE,innerAngle,                            PSYS_SRC_OUTERANGLE,outerAngle,                            PSYS_SRC_OMEGA, omega,                            PSYS_SRC_MAX_AGE, life,                            PSYS_SRC_TEXTURE, texture,                            PSYS_PART_START_ALPHA, startAlpha,                            PSYS_PART_END_ALPHA, endAlpha                                ]);                                              }       // --> turn off}default{    state_entry()    {        llListen(Wacky_Channel,"", NULL_KEY, "");                updateParticles(TRUE);    }    listen( integer channel, string name, key id, string message )    {        if (channel == Wacky_Channel)        {            list temp = llParseString2List(message, [Delimiter], []);                           if (llList2String(temp,0) == Enable_Wacky)            {                IsWacky = llList2Integer(temp,1);                                                updateParticles(IsWacky);            }        }    } }