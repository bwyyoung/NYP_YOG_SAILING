//Barrier Script
//By Brian Young/Daijo Zenovka


integer Wacky_Channel = -309;

string Enable_Wacky = "Enable_Wacky";
string Stop_Boost_Glow = "Stop_Boost_Glow";
string Start_Boost_Glow = "Start_Boost_Glow";

string Delimiter = "%$%^";

integer IsWacky = TRUE;

vector OriginalPos;

vector NewPos;


update(integer SetWacky)
{
    integer i;
        

    
    if (!SetWacky)
    {
            float distance = llVecDist(llGetPos(), NewPos);
    
    integer numturn = (integer)(distance/10.0);
        for (i = 0; i < numturn; i++)
        {
            
               
            llSetPos(llGetPos() +  (NewPos - OriginalPos)/numturn);
            
        }
        
        llSetPos(NewPos);
        llSetStatus(STATUS_PHANTOM, TRUE);
        llVolumeDetect(FALSE);
        llSetLinkAlpha(LINK_SET, 0.0, ALL_SIDES);  
        llMessageLinked(LINK_THIS,0,Stop_Boost_Glow,NULL_KEY); 
    }
    else
    {
            float distance = llVecDist(llGetPos(), OriginalPos);
    
    integer numturn = (integer)(distance/10.0);
        for (i = 0; i < numturn; i++)
        {
            
               
            llSetPos(llGetPos() +  ( OriginalPos-NewPos)/numturn);
            
        }
        
        
        llSetPos(OriginalPos);
        llSetStatus(STATUS_PHANTOM, FALSE);
        llSetLinkAlpha(LINK_SET, 1.0, ALL_SIDES);
        llMessageLinked(LINK_THIS,0,Start_Boost_Glow,NULL_KEY); 
    }   
    // --> turn off
}

default
{
    state_entry()
    {
        llListen(Wacky_Channel,"", NULL_KEY, "");
        OriginalPos = llGetPos();
        NewPos = OriginalPos + <0,0,20>;
        
        
        update(IsWacky);
        
        llSetLinkAlpha(LINK_SET, 1.0, ALL_SIDES);

    }
    touch(integer num)
    {
        if (llDetectedKey(0) == llGetOwner())
        {
            llResetScript();   
            llSetLinkAlpha(LINK_SET, 1.0, ALL_SIDES);
        }

    }
    listen( integer channel, string name, key id, string message )
    {

        if (channel == Wacky_Channel)
        {
            list temp = llParseString2List(message, [Delimiter], []);   
            
            if (llList2String(temp,0) == Enable_Wacky)
            {
                IsWacky = llList2Integer(temp,1);
                
                
                update(IsWacky);
            }
        }
    }
    collision_start(integer num)
    {

    }
 
}