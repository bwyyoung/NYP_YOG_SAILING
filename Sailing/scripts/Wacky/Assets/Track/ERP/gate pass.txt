//gate pass script
//written by brian young/ daijo zenovka

//goes in transparent prim beneath ERP gate, which makes beeping sound

integer point_Activater_handle;
integer point_Reset_handle;
integer point_Listener_handle;

integer point_Listener = -300;
integer point_Activater = -301;
integer point_Reset = -302;


integer Wacky_Channel = -309;

string Enable_Wacky = "Enable_Wacky";

string Delimiter = "%$%^";

integer IsWacky = FALSE;

vector OriginalPos;

vector NewPos;

update(integer SetWacky)
{
    integer i;
        

    
    if (!SetWacky)
    {
            float distance = llVecDist(llGetPos(), NewPos);
    
    integer numturn = (integer)(distance/10.0);
        for (i = 0; i < numturn; i++)
        {
            
               
            llSetPos(llGetPos() +  (NewPos - OriginalPos)/numturn);
            
        }
        
        
        llSetPos(NewPos);
                llVolumeDetect(FALSE);
        llSetStatus(STATUS_PHANTOM, TRUE);

         llSetLinkAlpha(LINK_SET, 0.0, ALL_SIDES);

                  
    }
    else
    {
            float distance = llVecDist(llGetPos(), OriginalPos);
    
    integer numturn = (integer)(distance/10.0);
        for (i = 0; i < numturn; i++)
        {
            
               
            llSetPos(llGetPos() +  ( OriginalPos-NewPos)/numturn);
            
        }
        
        
        llSetPos(OriginalPos);

        llSetStatus(STATUS_PHANTOM, TRUE);
                llVolumeDetect(TRUE);
        llSetLinkAlpha(LINK_SET, 1.0, ALL_SIDES);
 
    }   
    // --> turn off
}


default
{
    state_entry()
    {

       
       
        llListen(Wacky_Channel,"", NULL_KEY, "");
        OriginalPos = llGetPos();
        NewPos = OriginalPos + <0,0,20>;
        update(TRUE);
    }
    touch(integer num)
    {
        llResetScript();   
    }
    collision_start(integer num)
    {
        llPlaySound("beep",1);
    } 
    
    listen( integer channel, string name, key id, string message )
    {

        if (channel == Wacky_Channel)
        {
            list temp = llParseString2List(message, [Delimiter], []);   
            
            if (llList2String(temp,0) == Enable_Wacky)
            {
                IsWacky = llList2Integer(temp,1);
                
                
                update(IsWacky);
            }
        }
    }
}