//Splash 2 Particle Script
//By Brian Young/Daijo Zenovka
//Belongs to primitive 'Splash 2' of Laser 1/2/3

//It receives information about boat velocity from the SailRot Script and generates particles resembling water splash based on that velocity. It is located in the splash primitives.

//linked commands
string SetSplash  = "SetSplash";
string reset = "reset";

//delimiters
string Delimiter = "%$%^";

//variable to determine if particle amount should be adjusted at this time
integer Adjust  = FALSE;
integer FirstCall = TRUE;

//allow a gap of 'interval' between each particle adjustment
integer interval = 2;

float CurRate = 0.0; // the current rate

float DiffRate = 0.5;

//start stream of water particles
StartStream(float TheRate)
{
    llParticleSystem([               
        PSYS_PART_FLAGS , 0 //Comment out any of the following masks to deactivate them

    | PSYS_PART_INTERP_COLOR_MASK       //Colors fade from start to end
    | PSYS_PART_INTERP_SCALE_MASK       //Scale fades from beginning to end
    | PSYS_PART_FOLLOW_SRC_MASK         //Particles follow the emitter
    | PSYS_PART_FOLLOW_VELOCITY_MASK    //Particles are created at the velocity of the emitter
    | PSYS_PART_EMISSIVE_MASK           //Particles are self-lit (glow)
    ,

    PSYS_SRC_PATTERN,           PSYS_SRC_PATTERN_ANGLE_CONE

    ,PSYS_SRC_TEXTURE,           ""                 //UUID of the desired particle texture, or inventory name
    ,PSYS_SRC_MAX_AGE,           0.0                //Time, in seconds, for particles to be emitted. 0 = forever
    ,PSYS_PART_MAX_AGE,          4.0               //Lifetime, in seconds, that a particle lasts
    ,PSYS_SRC_BURST_RATE,        TheRate               //How long, in seconds, between each emission
    ,PSYS_SRC_BURST_PART_COUNT,  2                  //Number of particles per emission
    ,PSYS_SRC_BURST_RADIUS,      5.0                //Radius of emission
    ,PSYS_SRC_BURST_SPEED_MIN,   0.5                //Minimum speed of an emitted particle
    ,PSYS_SRC_BURST_SPEED_MAX,   1.0                //Maximum speed of an emitted particle
    ,PSYS_SRC_ACCEL,             <0,0,0>     //Acceleration of particles each second
    ,PSYS_PART_START_COLOR,      <0.9,0.9,1>         //Starting RGB color
    ,PSYS_PART_END_COLOR,        <1,1,1>      //Ending RGB color, if INTERP_COLOR_MASK is on
    ,PSYS_PART_START_ALPHA,      0.9                //Starting transparency, 1 is opaque, 0 is transparent.
    ,PSYS_PART_END_ALPHA,        0.0                //Ending transparency
    ,PSYS_PART_START_SCALE,      <0.5,0.5,0.5>      //Starting particle size
    ,PSYS_PART_END_SCALE,        <0,0,0.0>      //Ending particle size, if INTERP_SCALE_MASK is on
    ,PSYS_SRC_ANGLE_BEGIN,       0.1                 //Inner angle for ANGLE patterns
    ,PSYS_SRC_ANGLE_END,         0.1                //Outer angle for ANGLE patterns
    ,PSYS_SRC_OMEGA,             <0.0,0.0,0.0>       //Rotation of ANGLE patterns, similar to llTargetOmega()
            ]);

      
}


default
{
    state_entry()
    {
       llParticleSystem([]); 
    }
    link_message(integer from,integer to,string msg,key id) 
    {
        list temp = llParseString2List(msg, [Delimiter], []);
        
        //if we get a linked message to start a splashing particlestream
        if (llList2String(temp,0) == SetSplash)
        {
            //if we have not adjusted previously, we adjust now.
            if (!Adjust)
            {
                //set a timer to say when we can adjust again
                llSetTimerEvent(interval);
                if (llList2Float(temp,1)!=0)
                {
                    if (FirstCall)
                    {
                        StartStream(llList2Float(temp,1));
                        FirstCall = FALSE;
                    }
                    else
                    {
                        if (1/llList2Float(temp,1)-DiffRate > CurRate)
                            StartStream(llList2Float(temp,1));
                        else if (1/llList2Float(temp,1) + DiffRate < CurRate)
                            StartStream(llList2Float(temp,1));
                            
                    }
                    CurRate = llList2Float(temp,1);
                }
                else
                    llParticleSystem([]);
                
                //we have just adjusted 
                Adjust = TRUE;
            }
               
        }
        else if (llList2String(temp,0) == reset)
        {//reset our particle system to nothing
            llParticleSystem([]);   
            llResetScript();
        }
    }
    timer()
    {
        // we can adjust again
        Adjust  = FALSE;
        llSetTimerEvent(0);
    }

}
