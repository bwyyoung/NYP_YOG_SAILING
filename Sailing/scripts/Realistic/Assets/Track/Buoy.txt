list dataList;integer phantom=FALSE;//environmentfloat seaLevel;float Time = 1.0;integer total_number = 0;vector InitPos;/////////////////////////////////////////////////////////////////////////////////////set initial vehicle parameterssetVehicleParams() {    llSetVehicleType         (VEHICLE_TYPE_BOAT);    llSetVehicleRotationParam(VEHICLE_REFERENCE_FRAME,ZERO_ROTATION);    llSetVehicleFlags        (VEHICLE_FLAG_NO_DEFLECTION_UP|VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT                             |VEHICLE_FLAG_LIMIT_MOTOR_UP );     //linear motion    llSetVehicleVectorParam  (VEHICLE_LINEAR_FRICTION_TIMESCALE,<50.0,2.0,0.5>);;    llSetVehicleVectorParam  (VEHICLE_LINEAR_MOTOR_DIRECTION,ZERO_VECTOR);    llSetVehicleFloatParam   (VEHICLE_LINEAR_MOTOR_TIMESCALE,10.0);    llSetVehicleFloatParam   (VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE,60);    llSetVehicleFloatParam   (VEHICLE_LINEAR_DEFLECTION_EFFICIENCY,0.85);    llSetVehicleFloatParam   (VEHICLE_LINEAR_DEFLECTION_TIMESCALE,1.0);    //angular motion    llSetVehicleVectorParam  (VEHICLE_ANGULAR_FRICTION_TIMESCALE,<5,0.1,0.1>);    llSetVehicleVectorParam  (VEHICLE_ANGULAR_MOTOR_DIRECTION,ZERO_VECTOR);    llSetVehicleFloatParam   (VEHICLE_ANGULAR_MOTOR_TIMESCALE,0.1);    llSetVehicleFloatParam   (VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE,3);    llSetVehicleFloatParam   (VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY,1.0);    llSetVehicleFloatParam   (VEHICLE_ANGULAR_DEFLECTION_TIMESCALE,1.0);    //vertical attractor    llSetVehicleFloatParam   (VEHICLE_VERTICAL_ATTRACTION_TIMESCALE,3.0);    llSetVehicleFloatParam   (VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY,0.8);    //banking    llSetVehicleFloatParam   (VEHICLE_BANKING_EFFICIENCY,0.0);    llSetVehicleFloatParam   (VEHICLE_BANKING_MIX,0.8);    llSetVehicleFloatParam   (VEHICLE_BANKING_TIMESCALE,1);    //vertical control    llSetVehicleFloatParam   (VEHICLE_HOVER_HEIGHT,seaLevel);    llSetVehicleFloatParam   (VEHICLE_HOVER_EFFICIENCY,2.0);    llSetVehicleFloatParam   (VEHICLE_HOVER_TIMESCALE,1.0);    llSetVehicleFloatParam   (VEHICLE_BUOYANCY,1.0);}setVehicleParamsMotor() {    //vertical attractor    llSetVehicleFloatParam   (VEHICLE_VERTICAL_ATTRACTION_TIMESCALE,1.0);    llSetVehicleFloatParam   (VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY,0.8);    //banking    llSetVehicleFloatParam   (VEHICLE_BANKING_EFFICIENCY,1.0);    llSetVehicleFloatParam   (VEHICLE_BANKING_MIX,1.0);    llSetVehicleFloatParam   (VEHICLE_BANKING_TIMESCALE,1);    }//figure out where to put boat when it is rezzedsetInitialPosition() {    vector pos=llGetPos();    float groundHeight=llGround(ZERO_VECTOR);    float waterHeight = llWater(ZERO_VECTOR);    seaLevel=llWater(ZERO_VECTOR);        rotation initRot=llEuler2Rot(<0,0,225*DEG_TO_RAD>);        //llSetRot(ZERO_ROTATION);        //if over water, set boat height to sealevel + 0.12m;        if (groundHeight <= waterHeight) {            pos.z = waterHeight + 0.12;            while (llVecDist(llGetPos(),pos)>.001) llSetPos(pos);        }        InitPos = llGetPos();}//reset stuffstartup() {    llSetStatus(STATUS_PHYSICS,FALSE);    setInitialPosition();    setVehicleParams();        }default {        state_entry()     {       llSetStatus(STATUS_ROTATE_X | STATUS_ROTATE_Z | STATUS_ROTATE_Y,FALSE);       llSetStatus(STATUS_PHANTOM,FALSE);       llSetStatus(STATUS_BLOCK_GRAB,TRUE);       llSitTarget(<0.0, 0.0, 0.0>, ZERO_ROTATION);       startup();       llSetStatus(STATUS_PHYSICS,TRUE);       setInitialPosition();       llOwnerSay("unfixed position");    }    touch_start(integer num)    {        if (llDetectedName(0) == llKey2Name(llGetOwner()))        {        total_number+=num;                if (total_number%2==1)        {            llOwnerSay("fixed position");            startup();            llSetTimerEvent(Time);        }        else        {            llSetStatus(STATUS_PHYSICS,TRUE);            setInitialPosition();            llOwnerSay("unfixed position");        }    }    }    on_rez(integer param)     {    }     timer()    {              vector pos=llGetPos();      if ((pos.x+0.5)<InitPos.x ||(pos.x-0.5)>InitPos.x)      {          pos.x = InitPos.x;      }      if ((pos.y+0.5)<InitPos.y ||(pos.y-0.5)>InitPos.y)      {          pos.y = InitPos.y;      }      if ((pos.z+0.5)<InitPos.z ||(pos.z-0.5)>InitPos.z)      {          pos.z = InitPos.z;      }      llSetPos(InitPos);    }           }